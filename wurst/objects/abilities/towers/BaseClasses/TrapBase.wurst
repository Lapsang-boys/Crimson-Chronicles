package TrapBase

import HashMap
import TimerUtils
import InstantDummyCaster

import Alexandria
import GameplayConstants
import TimedEffect
import TrapBaseObjects

public HashMap<int, TrapBase> trapMap = new HashMap<int, TrapBase>

public constant TRAP_COOLDOWN_ORDER = "channel"
public constant SET_TRAP_ORDER = "cripple"

// ##################################################################
// ###################### Trap base (the trap) ######################
// ##################################################################

public class TrapBase
    vec2 pos
    player owner
    unit trapDummy
    unit caster
    string deathFxPath

    rect r
    region reg
    trigger trig
    timer tim

    construct (vec2 pos, unit trapDummy, unit caster, conditionfunc cond, code onEnter, string deathFxPath)
        this.pos = pos
        this.trapDummy = trapDummy
        this.caster = caster
        this.deathFxPath = deathFxPath
        setUp(cond, onEnter)

    function setUp(conditionfunc cond, code onEnter)
        this.owner = this.trapDummy.getOwner()

        // Quarter of a standard building block to cover an entire maze isle
        r = Rect(pos.x-32, pos.y-32, pos.x+32, pos.y+32)
        this.reg = CreateRegion()
        RegionAddRect(reg, r)

        this.trig = CreateTrigger()
        ..addCondition(Condition(function isEnemy))
        ..registerEnterRegion(reg, cond) // Event region enter (filter on custom cond)
        ..addAction(onEnter) // Action when trap is triggered
        ..addAction(function cleanUp) // If entered we need to release timers and remove this trigger, regions etc

        trapMap.put(this.trig.getHandleId(), this)

        this.tim = getTimer()
        // Store all trap info in timer (TrapBase object)
        this.tim.setData(this castTo int)

    // TrapBase object clean up
    ondestroy
        trapMap.remove(this.trig.getHandleId())
        if this.deathFxPath != null
            createTimedEffect(this.pos, 1., this.deathFxPath)
        this.trapDummy.remove()
        this.trig.destr()
        this.tim.release()
        this.reg.destr()

// On triggered trap activate TrapBase ondestroy
function cleanUp()
    trigger trig = GetTriggeringTrigger()
    trig.disable()

    TrapBase tb = trapMap.get(trig.getHandleId())
    destroy tb

function isEnemy() returns bool
    return GetTriggerUnit().getOwner() == PLAYER_BROWN

// ##################################################################
// ###################### Trapper class (the tower) #################
// ##################################################################

public class Trapper extends TowerWrapper
    unit caster
    TrapBase trap
    vec2 trapLoc

    int trapDummyID
    int setTrapID
    int dismantleTrapID
    int simCooldownID

    real cooldown

    construct(unit caster)
        super(caster)
        this.caster = caster
        this.trap = null
        this.trapLoc = caster.getPos()

        // Needs to be set in TowerHook through setIDs
        this.trapDummyID = '0000'
        this.setTrapID = '0000'
        this.dismantleTrapID = '0000'
        this.simCooldownID = '0000'

        // Needs to be set in TowerHook through setCooldown
        this.cooldown = 30.

        // TODO: Add buff for not placed trap

    function setIDs(int trapDummyID, int setTrapID, int dismantleTrapID, int simCooldownID)
        this.trapDummyID = trapDummyID
        this.setTrapID = setTrapID
        this.dismantleTrapID = dismantleTrapID
        this.simCooldownID = simCooldownID

    function setCooldown(real cooldown)
        this.cooldown = cooldown
        this.simulateCooldown()

    function setTrap(vec2 loc, conditionfunc cond, code onEnter, string deathFxPath)
        this.trapLoc = loc
        player owner = GetTriggerUnit().getOwner()
        unit trapDummy = CreateUnit(owner, this.trapDummyID, loc.x, loc.y, 180.)

        TrapBase tb = new TrapBase(loc, trapDummy, this.caster, cond, onEnter, deathFxPath)
        this.trap = tb

        this.toggleAbility()

    function disMantleTrap()
        destroy this.trap
        this.trap = null
        // Used to prevent trap from automatically being set in the same loc
        this.trapLoc = this.caster.getPos()
        this.toggleAbility()

    function toggleAbility()
        // Set trap (trap not placed)
        if this.caster.hasAbility(this.setTrapID)
            this.caster.removeAbility(this.setTrapID)
            this.caster.addAbility(this.dismantleTrapID)
            this.caster.removeAbility(ID_DUMMY_TRAP_NOT_BUFF)
        // Dismantle trap (trap placed)
        else
            this.caster.removeAbility(this.dismantleTrapID)
            this.caster.addAbility(this.simCooldownID)
            this.simulateCooldown()

    function simulateCooldown()
        this.caster.issueImmediateOrder(TRAP_COOLDOWN_ORDER)

        timer t = getTimer()
        t.setData(this castTo int)
        t.start(this.cooldown, () -> begin
            timer ti = GetExpiredTimer()
            Trapper tr = ti.getData() castTo Trapper
            tr.caster.removeAbility(tr.simCooldownID)
            tr.caster.addAbility(tr.setTrapID)
            // If trap has been placed before autoplace in the same loc
            if tr.caster.getPos() != tr.trapLoc
                tr.caster.issuePointOrder(SET_TRAP_ORDER, tr.trapLoc)
            else // Add buff to indicate trap needs to be set
                InstantDummyCaster.castTarget(tr.caster.getOwner(), ID_DUMMY_TRAP_NOT_SET, 1, "faeriefire", tr.caster)
            ti.release()
        end)

    ondestroy
        if this.trap != null
            destroy this.trap


