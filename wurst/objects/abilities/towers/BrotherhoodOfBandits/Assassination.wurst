package Assassination

import TimerUtils
import AbilityObjEditing
import Assets

import Alexandria
import TowerConstants
import Tooltip

// ##################################################################
// ###################### Ability objects ###########################
// ##################################################################

colorA stealth_color = colorA(255, 255, 255, 100)
colorA normal_color = colorA(255, 255, 255, 255)

class Stealth extends AbilityDefinitionCriticalStrikecreep
    construct(int id)
        super(id)

        setName("Stealthed")
        setHotkeyNormal("-")
        setTooltipNormal(1, tooltipCustomBasic("-", "Stealthed", ""))
        setTooltipNormalExtended(1, tooltipTextFlavor("The next attack made by the assassin will deal " + I2S(ASSASSINATE_STEALTH_BONUS_DMG) + " times the normal damage and break stealth.",
        "That came from behind..."))
        setIconNormal(Icons.bTNTheBlackArrow)

        setDamageMultiplier(1, I2R(ASSASSINATE_STEALTH_BONUS_DMG))
        setChancetoCriticalStrike(1, 100.)
        setNeverMiss(1, true)
        setTargetsAllowed(1, "air,ground,enemy")
        setHeroAbility(false)

        setButtonPositionNormalX(0)
        setButtonPositionNormalY(2)


@compiletime function stealthAbility()
    new Stealth(ID_TOWER_ASSASSIN_STEALTH)


class NotStealth extends AbilityDefinitionEvasion
    construct(int id)
        super(id)

        setHotkeyNormal("")
        setTooltipNormal(1, tooltipCustomBasic("-", "Stealth", ""))
        setTooltipNormalExtended(1, tooltipTextFlavor("The assassin automatically enter stealth after "
        + R2S(ASSASSINATE_STEALTH_TIME) + " seconds if no attacks have been made. The first attack from stealth will deal "
        + I2S(ASSASSINATE_STEALTH_BONUS_DMG) + "x the normal damage.",
        "Some argue that chameleoning your way through life gets you to a point where nothing is real. I beg to differ."))

        setIconNormal(Icons.bTNAmbush)
        setButtonPositionNormalX(0)
        setButtonPositionNormalY(2)
        setArtCaster("")
        setArtEffect("")
        setEffectSound("")

@compiletime function notStealth()
    new NotStealth(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH)


// ##################################################################
// ###################### Ability script ############################
// ##################################################################

public class Assassin extends TowerWrapper
    unit a
    real stealthTime
    bool leavingStealth

    timer t
    trigger trig

    construct(unit a)
        super(a)
        this.a = a
        this.stealthTime = ASSASSINATE_STEALTH_TIME
        this.leavingStealth = false
        this.t = getTimer()

        // More efficient to have a constant trigger?
        this.trig = CreateTrigger()
        this.trig.addAction(function assassinate)
        this.trig.addCondition(Condition(function isAssassin))
        this.trig.registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)

        this.t.setData(this castTo int)
        this.t.start(stealthTime, function stealth)

    ondestroy
        this.t.release()
        this.trig.destr()

// When timer expires activate (enter) stealth
function stealth()
    timer t = GetExpiredTimer()
    Assassin as = t.getData() castTo Assassin
    toggleAbility(as.a)

// Switch abilites and color when leaving/entering stealth
function toggleAbility(unit u)
    if u.hasAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.removeAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.addAbility(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH)
        u.setVertexColor(normal_color)
    else
        u.removeAbility(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH)
        u.addAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.setVertexColor(stealth_color)

// Check if assassin
function isAssassin() returns bool
    return GetAttacker().getTypeId() == ID_TOWER_ASSASSIN

// On attack check
function assassinate()
    unit u = GetAttacker()
    Assassin as1 = towerMap.get(u.getHandleId()) castTo Assassin
    // Reset timer for stealth
    as1.t.start(as1.stealthTime, function stealth)

    // Remove stealth if stealthed (leav stealth)
    if u.hasAbility(ID_TOWER_ASSASSIN_STEALTH)
        // Check required so that multiple timers are not started since event trigger several times
        if as1.leavingStealth
            return
        else
            as1.leavingStealth = true
            timer t = getTimer()
            t.setData(as1 castTo int)
            // Toggle ability after timer to not remove it before attack actually happends
            t.start(0.4, () -> begin
                timer tInner = GetExpiredTimer()
                Assassin as2 = tInner.getData() castTo Assassin
                toggleAbility(as2.a)
                tInner.release()
                as2.leavingStealth = false
            end)


