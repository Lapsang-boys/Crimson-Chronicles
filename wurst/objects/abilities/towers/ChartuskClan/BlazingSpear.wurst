package BlazingSpear

import Assets
import ChannelAbilityPreset
import BuffObjEditing
import TimerUtils
import InstantDummyCaster

import Alexandria
import TowerCharger
import TowerConstants
import Tooltip

// ##################################################################
// ###################### Ability objects ###########################
// ##################################################################


@compiletime function generateBlazingSpearDummy()
    new ChannelAbilityPreset(ID_BLAZING_FURY_DUMMY_ICON, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Blazing fury", ""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("After " + JAVILINIST_MAX_CHARGES.toString() + " attacks the javilinist will" +
        " go into frenzy having a " + (JAVILINIST_FURY_SPEED*100).toString() + "% attackspeed increase for." +
        JAVILINIST_FURY_CHARGES.toString() + "attacks.",
        JAVILINIST_WARCRY))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNBerserkForTrolls)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
class BlazingSpearBuff extends BuffDefinition
    construct(int newBuffId, int origBuggId)
        super(newBuffId, origBuggId)

        setIcon(Icons.bTNBerserkForTrolls)

        setTooltipNormal(1, tooltipBuffName("Blazing fury", true))
        setTooltipNormalExtended(1, tooltipBuffText("This unit has increased attackspeed."))

@compiletime function generateBuff()
    new BlazingSpearBuff(ID_BLAZING_FURY_BUFF, ID_EMERALD_SPEAR_BUFF_BASE)

@compiletime function generateBlazingFury()
    new AbilityDefinitionBloodlustCreep(ID_BLAZING_FURY)
    ..setScalingFactor(1, 0.25)
    ..setAnimationNames("")

    ..setDurationNormal(1, 0)
    ..setCheckDependencies(false)
    ..setManaCost(1, 0)
    ..setCastingTime(1, 0)
    ..setCastRange(1, 1200)
    ..setAttackSpeedIncrease(1, JAVILINIST_FURY_SPEED.toReal())
    ..setTargetsAllowed(1, commaList(
        TargetsAllowed.friend,
        TargetsAllowed.structure,
        TargetsAllowed.notself
    ))



// ##################################################################
// ###################### Ability script ############################
// ##################################################################

public class FieryJavilinistWrapper extends TowerCharger
    trigger trig
    timer t
    unit attacked
    bool frenzy

    construct(unit u, int maxCharges, bool verbose, string warcry)
        super(u, maxCharges, verbose, warcry)
        this.frenzy = false

        this.t = getTimer()
        this.trig = CreateTrigger()

        ..addAction(function javlinCheck)
        ..addCondition(Condition(function isJavilinist))
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)


    ondestroy
        this.t.release()
        this.trig.destr()

// Check if correct Javilinist
function isJavilinist() returns bool
    if not GetAttacker().getTypeId() == ID_TOWER_FIERY_JAVILINIST
        return false

    FieryJavilinistWrapper javilinist = towerMap.get(GetAttacker().getHandleId()) castTo FieryJavilinistWrapper
    return javilinist.trig.getHandleId() == GetTriggeringTrigger().getHandleId()

// On attack check
function javlinCheck()
    unit u = GetAttacker()
    unit a = GetAttackedUnitBJ()
    FieryJavilinistWrapper javilinist = towerMap.get(u.getHandleId()) castTo FieryJavilinistWrapper

    // If in frenzy target does not matter and we decrement
    if javilinist.frenzy
        if javilinist.getCharges() <= 0
            goNormal(javilinist)
        else
            javilinist.decrement()
            return

    // If attacking new creature reset
    if a != javilinist.attacked
        javilinist.reset()
        javilinist.increment()
        javilinist.attacked = a
        return

    if javilinist.increment() // increment returns true if max reached
        goFrenzy(javilinist)


function goNormal(FieryJavilinistWrapper javilinist)
    javilinist.reset()
    javilinist.tower.removeAbility(ID_BLAZING_FURY_BUFF)
    javilinist.tower.removeAbility(ID_BLAZING_FURY_BUFF_BASE)
    javilinist.frenzy = false


function goFrenzy(FieryJavilinistWrapper javilinist)
    javilinist.tower.pause()
    javilinist.tower.setAnimation("morph")
    // Reset timer for stealth
    javilinist.t.setData(javilinist castTo int)
    javilinist.t.start(1, function castFrenzy)


function castFrenzy()
    timer t = GetExpiredTimer()
    FieryJavilinistWrapper javilinist = t.getData() castTo FieryJavilinistWrapper
    javilinist.tower.unpause()

    javilinist.setChrages(5)
    javilinist.frenzy = true

    InstantDummyCaster.castTarget(javilinist.tower.getOwner(), ID_BLAZING_FURY, 1, "bloodlust", javilinist.tower, javilinist.tower.getPos())






