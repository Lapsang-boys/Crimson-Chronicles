package BlazingSpear

import Assets
import ChannelAbilityPreset
import TimerUtils

import Alexandria
import TowerCharger
import TowerConstants
import Tooltip

// ##################################################################
// ###################### Ability objects ###########################
// ##################################################################


@compiletime function generateBlazingSpearDummy()
    new ChannelAbilityPreset(ID_BLAZING_SPEAR_DUMMY_ICON, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Blazing spear throw", ""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("After " + JAVILINIST_MAX_CHARGES.toString() + " attacks the javilinist will" +
        " throw a powerful spear pierceing several targets, dealing " + JAVILINIST_SPEAR_DAMAGE.toString() + " damage.",
        JAVILINIST_WARCRY))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNSearingArrows)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

@compiletime function generateBlazingSpear()
    new AbilityDefinitionAlchemistAcidBomb(ID_BLAZING_SPEAR)
    ..setMissileArt(Abilities.fireBallMissile)
    ..setMissileArc(0.05)
    ..setMissileSpeed(1200)

    ..setDurationNormal(1, 0.2)
    ..setPrimaryDamage(1, 500)
    ..setSecondaryDamage(1, 0)

    ..setManaCost(1, 0)
    ..setCastingTime(1, 0.4)
    ..setCastRange(1, 1200)



// ##################################################################
// ###################### Ability script ############################
// ##################################################################

public class FieryJavilinistWrapper extends TowerCharger
    trigger trig
    timer t
    unit attacked

    construct(unit u, int maxCharges, bool verbose, string warcry)
        super(u, maxCharges, verbose, warcry)

        this.t = getTimer()
        this.trig = CreateTrigger()

        ..addAction(function javlinThrow)
        ..addCondition(Condition(function isJavilinist))
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)


    ondestroy
        this.t.release()
        this.trig.destr()

// Check if correct Javilinist
function isJavilinist() returns bool
    if not GetAttacker().getTypeId() == ID_TOWER_FIERY_JAVILINIST
        return false

    FieryJavilinistWrapper javilinist = towerMap.get(GetAttacker().getHandleId()) castTo FieryJavilinistWrapper
    return javilinist.trig.getHandleId() == GetTriggeringTrigger().getHandleId()

// On attack check
function javlinThrow()
    unit u = GetAttacker()
    unit a = GetAttackedUnitBJ()
    FieryJavilinistWrapper javilinist = towerMap.get(u.getHandleId()) castTo FieryJavilinistWrapper

    if a != javilinist.attacked
        javilinist.reset()
        javilinist.increment()
        javilinist.attacked = a
        return


    if not javilinist.increment() // increment returns true if max reached
        return

    javilinist.tower.pause()
    javilinist.tower.setAnimation("morph")
    // Reset timer for stealth
    javilinist.t.setData(javilinist castTo int)
    javilinist.t.start(1, function castJavilin)


function castJavilin()
    timer t = GetExpiredTimer()
    FieryJavilinistWrapper javilinist = t.getData() castTo FieryJavilinistWrapper
    javilinist.tower.unpause()

    // Add ability
    javilinist.tower.addAbility(ID_BLAZING_SPEAR)
    javilinist.tower.setAbilityLevel(ID_BLAZING_SPEAR, 1)
    javilinist.tower.setAbilityCooldown(ID_BLAZING_SPEAR, 1, 0)
    // Cast ability
    if javilinist.attacked.isAlive()
        javilinist.tower.issueTargetOrder("acidbomb", javilinist.attacked)

    // TODO:
    // Remove abiliy or change to a dummy caster and use animations on javilinist






