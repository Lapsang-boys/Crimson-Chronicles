package Assassination

import Assets
import ChannelAbilityPreset
import ClosureTimers

import Alexandria
import TowerConstants
import Tooltip

// ##################################################################
// ###################### Ability objects ###########################
// ##################################################################

colorA stealth_color = colorA(255, 255, 255, 100)
colorA normal_color = colorA(255, 255, 255, 255)

class Stealth extends AbilityDefinitionCriticalStrikecreep
    construct(int id)
        super(id)

        setName("Stealthed")
        setHotkeyNormal("")
        setTooltipNormal(1, tooltipCustomBasic("Passive", "Stealthed", ""))
        setTooltipNormalExtended(1, tooltipTextFlavor("The next attack made by the assassin will deal " + I2S(ASSASSINATE_STEALTH_BONUS_DMG) + " times the normal damage and break stealth.",
        "\"That came from behind...\" - Unknown famous last words"))
        setIconNormal(Icons.pASBTNElunesBlessing)

        setDamageMultiplier(1, I2R(ASSASSINATE_STEALTH_BONUS_DMG))
        setChancetoCriticalStrike(1, 100.)
        setNeverMiss(1, true)
        setTargetsAllowed(1, "air,ground,enemy")
        setHeroAbility(false)

        setButtonPositionNormalX(0)
        setButtonPositionNormalY(2)

@compiletime function stealthAbility()
    new Stealth(ID_TOWER_ASSASSIN_STEALTH)


@compiletime function generateNotStealth()
    new ChannelAbilityPreset(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Stealth", ""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("The assassin automatically enter stealth after "
        + R2S(ASSASSINATE_STEALTH_TIME) + " seconds if no attacks have been made. The first attack from stealth will deal "
        + I2S(ASSASSINATE_STEALTH_BONUS_DMG) + "x the normal damage.",
        "Being able to blend in so well that you you cannot be seen is something only master assassins are able to."))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNAmbush)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)


// ##################################################################
// ###################### Ability script ############################
// ##################################################################

public class Assassin extends TowerWrapper
    unit a
    real stealthTime
    bool leavingStealth

    trigger trig

    construct(unit a)
        super(a)
        this.a = a
        this.stealthTime = ASSASSINATE_STEALTH_TIME
        this.leavingStealth = false

        // More efficient to have a constant trigger?
        this.trig = CreateTrigger()
        this.trig.addAction(function assassinate)
        this.trig.addCondition(Condition(function isAssassin))
        this.trig.registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)

        doAfter(stealthTime, () -> begin
            toggleAbility(a)
        end

    ondestroy
        this.trig.destr()

// Switch abilites and color when leaving/entering stealth
function toggleAbility(unit u)
    if u.hasAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.removeAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.addAbility(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH)
        u.setVertexColor(normal_color)
    else
        u.removeAbility(ID_TOWER_ASSASSIN_STEALTH_NOT_IN_STEALTH)
        u.addAbility(ID_TOWER_ASSASSIN_STEALTH)
        u.setVertexColor(stealth_color)

// Check if assassin
function isAssassin() returns bool
    return GetAttacker().getTypeId() == ID_TOWER_ASSASSIN

// On attack check
function assassinate()
    unit u = GetAttacker()
    Assassin as = towerMap.get(u.getHandleId()) castTo Assassin

    // Reset timer for stealth
    doAfter(as.stealthTime, () -> begin
        toggleAbility(u)
    end)

    // Remove stealth if stealthed (leav stealth)
    if not u.hasAbility(ID_TOWER_ASSASSIN_STEALTH)
        return

    // Check required so that multiple timers are not started since event trigger several times
    if as.leavingStealth
        return

    as.leavingStealth = true

    doAfter(0.4, () -> begin
        toggleAbility(u)
        as.leavingStealth = false
    end)

