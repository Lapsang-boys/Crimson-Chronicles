package MoonFlare

import Assets
import ChannelAbilityPreset
import TimerUtils

import TowerConstants
import Tooltip

real DAMAGE_1 = 50
real DAMAGE_2 = 75
int TARGETS_HIT_2 = 4
real ANIMATION_TIME = 0.7

// ##################################################################
// ###################### Ability objects ###########################
// ##################################################################

@compiletime function generateMoonFlareDummy1()
    new ChannelAbilityPreset(ID_MOON_FLARE_TOOLTIP_1, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Moon Flare",""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("The Lunar Adept has " + I2S(MOON_FLARE_PROC) + "% chance to " +
        "unleash " + I2S(MOON_FLARE_NUM_BURSTS) + " bursts of lunar energy, each dealing " + R2S(DAMAGE_1) + " damage to the target.",
        "Even Adepts can cause serious harm once they learn to harness the leaking energy from the Well of Eternity."))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNWispSplode)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

@compiletime function generateMoonFlareDummy2()
    new ChannelAbilityPreset(ID_MOON_FLARE_TOOLTIP_2, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Moon Storm",""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("The Lunar Guaridan has " + I2S(MOON_FLARE_PROC) + "% chance to " +
        "unleash " + I2S(MOON_FLARE_NUM_BURSTS) + " storm surges of lunar energy, each dealing " + R2S(DAMAGE_1) +
        " damage and has to possibility to bounce to a total of " + I2S(TARGETS_HIT_2) + " targets.",
        "The ancient Guardians of Moonglade have connections with the cosmic energy so strong that they are able" +
        " to channel it through several mortal creatures without it dissipating."))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNMoonStone)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

class MoonFlare extends AbilityDefinitionChainLightningcreep
    construct(int id)
        super(id)

        setArtCaster("")
        setArtTarget(Abilities.blinkTarget)
        setLightningEffects("DRAM")

        setDamageperTarget(1, DAMAGE_1)
        setDamageperTarget(2, DAMAGE_2)
        setNumberofTargetsHit(1, 1)
        setNumberofTargetsHit(2, TARGETS_HIT_2)

        setLevels(2)
        presetManaCost((int _) -> 0)
        presetCooldown((int _) -> 0)
        presetCastRange((int _) -> 2000)
        setAreaofEffect(1, 500)
        setAreaofEffect(2, 500)
        setHeroAbility(false)
        setRequirements("")


@compiletime function generateSpell()
    new MoonFlare(ID_MOON_FLARE)

// ##################################################################
// ###################### Support classes ###########################
// ##################################################################

class MoonFlareInfo
    unit attacker
    unit target
    int abilityLvl
    int iterations
    timer t

    construct(unit attacker, unit target, int abilityLvl)
        this.attacker = attacker
        this.target = target
        this.abilityLvl = abilityLvl
        this.iterations = 0
        this.t = getTimer()

    ondestroy
        this.t.release()

// ##################################################################
// ###################### Ability script ############################
// ##################################################################

function isLunar() returns bool
    return GetAttacker().getTypeId() == ID_TOWER_LUNAR_ADEPT or GetAttacker().getTypeId() == ID_TOWER_LUNAR_GUARDIAN

// On attack check
function moonAttack()
    int i = GetRandomInt(1, 100)
    if i >= MOON_FLARE_PROC
        return

    unit attacker = GetAttacker()
    unit target = GetAttackedUnitBJ()
    int abilityLvl

    if attacker.hasAbility(ID_MOON_FLARE_TOOLTIP_1)
        abilityLvl = 1
    else
        abilityLvl = 2

    MoonFlareInfo mfi = new MoonFlareInfo(attacker, target, abilityLvl)
    mfi.t.setData(mfi castTo int)
    mfi.t.startPeriodic(ANIMATION_TIME, function flare)

function flare()
    timer t = GetExpiredTimer()
    MoonFlareInfo mfi = t.getData() castTo MoonFlareInfo

    if not mfi.target.isAlive() or mfi.iterations >= MOON_FLARE_NUM_BURSTS
        stopFlare(mfi)
        return

    mfi.attacker.addAbility(ID_MOON_FLARE)
    mfi.attacker.setAbilityLevel(ID_MOON_FLARE, mfi.abilityLvl)
    mfi.attacker.issueTargetOrder("chainlightning", mfi.target)
    mfi.iterations ++

function stopFlare(MoonFlareInfo mfi)
    mfi.attacker.removeAbility(ID_MOON_FLARE)
    destroy mfi


init
    trigger trig = CreateTrigger()
    trig.addAction(function moonAttack)
    trig.addCondition(Condition(function isLunar))
    trig.registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)
