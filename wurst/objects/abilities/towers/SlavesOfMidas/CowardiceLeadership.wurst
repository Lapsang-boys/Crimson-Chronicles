package CowardiceLeadership

import Assets
import ClosureTimers
import BuffObjEditing
import ClosureForGroups
import ChannelAbilityPreset

import Alexandria
import TowerConstants
import Tooltip

constant INSPIRE_RANGE = 256.0
constant ATTACK_SPEED_INCREASE = 0.2

@compiletime function generateCowardiceDummy()
    new ChannelAbilityPreset(ID_COWARDICE, 1, true)
        ..setHotkeyNormal("")
        ..setTooltipNormal(1, tooltipCustomBasic("Passive", "Cowardice", ""))
        ..setTooltipNormalExtended(1, tooltipTextFlavor("Hiding behind their shields, the newly recruited sellswords have a reduced attack speed.",
        "There has been discussions about whether it's more economical to not hand out shields to new recruits. The reasoning goes that the money could just go towards recruiting instead."))

        ..presetTargetTypes(Targettype.PASSIVE)
        ..setIconNormal(Icons.bTNAmbush)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

class Leadership extends AbilityDefinitionAuraEnduranceCreep
    construct(int id)
        super(id)

        setName("Leadership")
        setHotkeyNormal("")
        setTooltipNormal(1, tooltipCustomBasic("Passive", "Leadership", ""))
        setTooltipNormalExtended(1, tooltipTextFlavor("Inspire fellow soliders to increase their ferocity in battle.",
        "What we will achieve today will make our legacy immortal. Raise your sword and together we will charge towards our promised fate."))

        setButtonPositionNormalX(0)
        setButtonPositionNormalY(2)
        setArtCaster("")
        setIconNormal(Icons.bTNDivineIntervention)
        setItemAbility(false)
        setArtTarget("")
        setHeroAbility(false)
        setRequirements("")

        setTargetsAllowed(1, commaList(
            TargetsAllowed.friend,
            TargetsAllowed.structure,
            TargetsAllowed.mechanical
        ))

        setDurationNormal(1, 0)

        setAttackSpeedIncrease(1, ATTACK_SPEED_INCREASE)
        setManaCost(1, 0)
        setCastRange(1, INSPIRE_RANGE)
        setAreaofEffect(1, INSPIRE_RANGE)

        setLevels(1)
        setBuffs(1, ID_HIGH_MORALE_BUFF.toRawCode())
        setMissileArt("")

class HighMoraleBuff extends BuffDefinition
    construct(int newBuffId, int origBuggId)
        super(newBuffId, origBuggId)

        setIcon(Icons.bTNDivineIntervention)
        setArtTarget(1, Abilities.innerFireTarget)
        setTargetAttachmentPoint0(1, "overhead")

        // setMissileArt(1, "")

        setIconNormal(1, Icons.bTNDivineIntervention)
        setTooltipNormal(1, tooltipBuffName("High morale", true))
        setTooltipNormalExtended(1, tooltipBuffText("This unit has high morale and can attack more ferociously."))

class InspireTarget implements ForGroupCallback
    bool inspire
    construct(bool inspire)
        this.inspire = inspire
    
    override function callback(unit u)
        if isSellsword(u)
            // Remove defend animation if inspired.
            if this.inspire
                AddUnitAnimationProperties(u, "defend", false)
            
            // Add defend animation if not inspired.
            else if not u.hasAbility(ID_HIGH_MORALE_BUFF)
                AddUnitAnimationProperties(u, "defend", true)


public class Defector extends TowerWrapper
    unit u
    effect e
    construct(unit u)
        super(u)
        this.u = u
        AddUnitAnimationProperties(this.u, "defend", false)
        this.e = addEffect(Doodads.bannerHuman1, this.u.getPos()+vec2(32, 32))
        doAfter(1., () -> begin
            forUnitsInRange(this.u.getPos(), INSPIRE_RANGE+32, new InspireTarget(true))
        end)

    ondestroy
        vec2 pos = this.u.getPos()
        this.e.destr()
        doAfter(5., () -> begin
            forUnitsInRange(pos, INSPIRE_RANGE+32, new InspireTarget(false))
        end)

public class Sellsword
    unit u
    construct(unit u)
        this.u = u
        doAfter(1., () -> (begin
            if not u.hasAbility(ID_HIGH_MORALE_BUFF)
                AddUnitAnimationProperties(u, "defend", true)
        end))

function isSellsword(unit u) returns bool
    return u.getTypeId() == ID_TOWER_SELLSWORD

@compiletime function generateSpellsAndBuffs()
    new HighMoraleBuff(ID_HIGH_MORALE_BUFF, ID_HIGH_MORALE_BUFF_BASE)
    new Leadership(ID_INSPIRE)
