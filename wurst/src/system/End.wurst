package End

import InitRegions

import Assets
import LinkedList

import Regions
import Alexandria
import GameplayConstants
import Movement
import TimedEffect
import LevelHandler

class UnitWrapper
    unit u
    player p
    construct(unit u, player p)
        this.u = u
        this.p = p

    ondestroy
        registerMobDeath(this.p)

function leak()
    let u = GetTriggerUnit()
    int n = getPlayerN(u)
    player p = Player(n)
    UnitWrapper uw = new UnitWrapper(u, p)

    // Take player life.
    int lifeTaken = u.getFoodUsed()

    // Point value is interpreted as bounty.
    registerLeak(p, lifeTaken, GetUnitPointValue(u))

    // SFX.
    createTimedEffect(u.getPos(), 1., Abilities.aIilTarget)

    // Destroy MobWrapper
    destroy mobMap.get(u.getHandleId())

    // Register mob death for player
    destroy uw


function isUnitOwnedByPlayerBrown() returns boolean
    return GetTriggerUnit().getOwner() == PLAYER_BROWN

function isValid() returns boolean
    return GetTriggerUnit().getUserData() == 4

trigger endEnter = CreateTrigger()

init
    endEnter.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    endEnter.addAction(function leak)

    for i in ends
        let r = rectFromIndex(i)
        endEnter.addCondition(Condition(function isValid))
        TriggerRegisterEnterRectSimple(endEnter, r)
