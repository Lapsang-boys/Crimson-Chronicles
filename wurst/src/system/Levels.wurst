package Levels

import LinkedList
import Assets

import Squad
import GameplayConstants
import MobType
import Colorscheme

// Felwood
import FelwoodMobList
import AgileMob
import DemonMob
import TreantMob

// ----------------------------------------------------------------------------
// ===================== Level class and methods ==============================
// ----------------------------------------------------------------------------

public class Level
    LinkedList<SquadMember> squadChain
    int bonus
    string levelName
    string desc
    LinkedList<MobType> types

    construct (LinkedList<SquadMember> squadChain, int bonus, string levelName, string desc, LinkedList<MobType> types)
        this.squadChain = squadChain
        this.bonus = bonus
        this.levelName = levelName
        this.desc = desc
        this.types = types

    function printInfo(player p)
        printTimedToPlayer(this.levelName, DISPLAY_TIME, p)
        if this.desc.length() > 0
            printTimedToPlayer(this.desc, DISPLAY_TIME, p)
        for mt in this.types
            printTimedToPlayer(mobHint(mt), DISPLAY_TIME, p)

public LinkedList<Level> levels = new LinkedList<Level>

function levelNameMsg(int num, string name) returns string
    return discreetColor.colorize("[") + textColor.colorize("Level ") + numberColor.colorize(I2S(num)) + discreetColor.colorize("]")
            + textColor.colorize(" - ") + nameColor.colorize(name)

function levelDescriptionMsg(string desc) returns string
    return textColor.colorize(desc)

// ----------------------------------------------------------------------------
// ============================= Level objects ================================
// ----------------------------------------------------------------------------

init
    // ============== Area 1 ==============
    Level L0 = new Level(
        toCenterSquad(ID_MOB_PATH_SHOWER, 3, new EmptyHooker),
        0, // Bonus
        levelNameMsg(0, "Path shower"),
        levelDescriptionMsg(""),
        new LinkedList<MobType>..add(MobType.INVULNERABLE))
    levels.add(L0)

    // Do we need squad member bounty?
    Level L1 = new Level(
        toDefaultSquad(ID_MOB_STAG, 10, new EmptyHooker),
        10, // Bonus
        levelNameMsg(1, "Stag"),
        levelDescriptionMsg("Terrified stags escaping in a stampede."),
        new LinkedList<MobType>)
    levels.add(L1)

    Level L2 = new Level(
        toDefaultSquad(ID_MOB_DIRE_WOLF, 10, new Agile(DIRE_WOLF_MS, 100, 1.5)),
        10, // Bonus
        levelNameMsg(2, "Dire Wolf"),
        levelDescriptionMsg("Description"),
        new LinkedList<MobType>)
    levels.add(L2)

    Level L3 = new Level(
        toDefaultSquad(ID_MOB_DEMONIC_SATYR, 10, new Demon(0.15, 256, Abilities.howlCaster, Abilities.avengerMissile)),
        10, // Bonus
        levelNameMsg(3, "Demonic satyrs"),
        levelDescriptionMsg("Description"),
        new LinkedList<MobType>..add(MobType.DEMON))
    levels.add(L3)

    Level L4 = new Level(
        toDefaultSquad(ID_MOB_FEL_TREANT, 6, new Treant(ID_FEL_SMOG, 3.0, Abilities.howlCaster)),
        10, // Bonus
        levelNameMsg(4, "Fel Treants"),
        levelDescriptionMsg("Description"),
        new LinkedList<MobType>..add(MobType.DEMON))
    levels.add(L4)

    // LinkedList<SquadMember> L4Chain = new LinkedList<SquadMember>
    // ..add(new SquadMember(ID_RACCOON, 2, 1, SpawnPosition.LEFT, spawnInterval(0.1, 0.1), new EmptyHooker))
    // ..add(new SquadMember(ID_ACCO, 3, 1, SpawnPosition.CENTER, spawnInterval(0.1, 0.1), new EmptyHooker))
    // ..add(new SquadMember(ID_RACCOON, 2, 1, SpawnPosition.RIGHT, spawnInterval(0.1, 0.1), new EmptyHooker))
    // ..add(new SquadMember(ID_ARCHY, 1, 1, SpawnPosition.CENTER, spawnInterval(3.1, 3.1), new EmptyHooker))
    // ..add(new SquadMember(ID_RACCOON, 2, 1, SpawnPosition.RANDOM, spawnInterval(5.1, 5.1), new EmptyHooker))
    // .toSquadChain()
    // Level L4 = new Level(
    //     L4Chain,
    //     10, // Bonus
    //     levelNameMsg(4, "Squaden"),
    //     levelDescriptionMsg("Description"),
    //     new LinkedList<MobType>)
    // levels.add(L4)

