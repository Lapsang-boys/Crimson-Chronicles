package MobMissile

import TimerUtils

import Regions
import Movement
import TimedEffect

constant ITERATION_TIME = 0.01
constant GRAVITY = -1280.

public class MobMissile
    unit u
    real v0
    real alpha
    string impactFx

    real velocityX
    real velocityZ
    angle direction

    real t
    real flyTime
    real acceleartionZ = GRAVITY

    construct(unit u, real v0, real alpha, string impactFx)
        this.u = u
        this.v0 = v0
        this.alpha = Deg2Rad(alpha)
        this.impactFx = impactFx

        this.direction = u.getFacingAngle()
        this.velocityX = this.v0*Cos(this.alpha)
        this.velocityZ = this.v0*Sin(this.alpha)

        this.flyTime = -1*(this.velocityZ/this.acceleartionZ)*2
        this.t = 0
        this.acceleartionZ *= ITERATION_TIME

    function launch()
        // Make sure landing is not out of bounds
        this.calcLandingSpot()

        this.u.pause()
        // Add storm crow to be able to modify flyheight (...)
        this.u.addAbility('Arav')
        this.u.setPathing(false)
        this.u.setInvulnerable(true)

        timer t = getTimer()
        t.setData(this castTo int)
        t.start(ITERATION_TIME, function moveMissile)

    function moveX()
        vec2 newPos = this.u.getPos().polarOffset(this.direction, this.velocityX*ITERATION_TIME)
        this.u.setPos(newPos)

    function moveZ()
        this.calcZveolcity()
        real zMove = this.velocityZ*ITERATION_TIME

        this.u.setFlyHeight(this.u.getFlyHeight() + zMove, 999)

    function calcZveolcity()
        this.velocityZ += this.acceleartionZ

    function calcLandingSpot()
        vec2 origin = this.u.getPos()

        for i = 0 to 10
            vec2 landingSpot = origin.polarOffset(this.direction, this.velocityX*this.flyTime)

            if validSpot(landingSpot)
                u.setFacing(this.direction)
                return
            else
                this.direction += angle(PI/9)


    function validSpot(vec2 landingSpot) returns bool
        return landingSpot.isInRect(rectFromIndex(playerArea.get(this.u.getPlayerN())))


function moveMissile()
    timer t = GetExpiredTimer()
    MobMissile mm = t.getData() castTo MobMissile

    if mm.t > mm.flyTime
        mm.u.setPathing(true)
        mm.u.setInvulnerable(false)
        mm.u.unpause()
        mm.u.removeAbility('Arav')
        mm.u.issuePointOrder("move", mm.u.getNext())
        createTimedEffect(mm.u.getPos(), 1., mm.impactFx)
        t.release()
        return

    mm.moveX()
    mm.moveZ()
    mm.t += ITERATION_TIME

    t.start(ITERATION_TIME, function moveMissile)
