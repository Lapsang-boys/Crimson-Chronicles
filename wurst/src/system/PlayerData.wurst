package PlayerData

import LinkedList
import ClosureForGroups
import ErrorHandling
import Levels

import Regions
import Leaderboard
import GameplayConstants
import UnitObjEditing
import ObjectIdGenerator
import ObjectIds
import Assets

public constant ID_TORCH = compiletime(UNIT_ID_GEN.next())

class Remover implements ForGroupCallback
    bool removePlayerUnits
    bool removeBuilder
    player p
    unit builder
    construct(bool removePlayerUnits, bool removeBuilder, player p, unit builder)
        this.removePlayerUnits = removePlayerUnits
        this.removeBuilder = removeBuilder
        this.p = p
        this.builder = builder

    override function callback(unit u)
        if not removeBuilder and u.getHandleId() == builder.getHandleId()
            return
        if removePlayerUnits
            u.remove()
        else if not u.getOwner() == p
            u.remove()

public class PlayerData
    int playerNum
    player p
    int levelNum
    int zoneNum
    int life
    int mobsRemoved
    unit builder
    bool levelInProgress
    int difficulty
    fogmodifier fog
    LinkedList<unit> torches

    construct(int playerNum, int levelNum, int zoneNum, int life)
        this.playerNum = playerNum
        this.p = Player(playerNum)
        this.levelNum = levelNum
        this.zoneNum = zoneNum
        this.life = life
        this.mobsRemoved = 0
        this.levelInProgress = false
        this.difficulty = NORMAL

    function addTorches()
        print("addTorches")
        // this.torches = new LinkedList<unit>
        // ..add(createUnit(this.p, ID_TORCH, pos, angle(0)))

    function removeTorches()
        print("addTorches")
        this.torches = new LinkedList<unit>

    function setBuilder(unit builder)
        this.builder = builder

    function cleanse(bool removePlayerUnits, bool removeBuilder)
        Remover rem = new Remover(removePlayerUnits, removeBuilder, this.p, this.builder)
        forUnitsInRect(this.getPlayerRegion(), rem)

    function reset(int zone, int level)
        this.levelInProgress = false
        this.zoneNum = zone
        this.life = STARTING_LIFE
        this.mobsRemoved = 0
        this.levelNum = level
        updateLife(this.p, this.life)
        this.updateFog()

    function getPlayerRegion() returns rect
        return this.getArea().area

    function initFog()
        this.fog = CreateFogModifierRect(p, FOG_OF_WAR_VISIBLE, this.getPlayerRegion(), true, false)
        this.fog.start()    

    function updateFog()
        // Remove fog of last area.
        this.fog.stop()
        this.fog.destr()

        if this.zoneNum == ZONE_STRATHOLME
            this.addTorches()
        else
            this.removeTorches()
            
            // Create fog for new area.
            this.initFog()    
    

    function getArea() returns Area
        if zones.size() < this.zoneNum
            error("getArea#1")
            return new Area()
        if zones.get(this.zoneNum).size() < this.p.getId()
            error("getArea#2")
            return new Area()

        return zones.get(this.zoneNum).get(this.p.getId())

public LinkedList<PlayerData> playerData = new LinkedList<PlayerData>

@initFirst function initPlayerData()
    // Init player level tracker
    for i = 0 to NUMBER_OF_PLAYERS-1
        PlayerData pd = new PlayerData(i, 0, 0, STARTING_LIFE)
        playerData.add(pd)

public function PlayerData.getLevel() returns Level
    return this.getLevels().get(this.levelNum)

public function PlayerData.getLevels() returns LinkedList<Level>
    return zoneLevels.get(this.zoneNum)

public function unit.getPlayerData() returns PlayerData
    return playerData.get(this.getOwner().getId())

public function player.getPlayerData() returns PlayerData
    return playerData.get(this.getId())


class Torch extends UnitDefinition
    construct(int id)
        super(id, 'oeye')

        setSightRadiusDay(512)
        setSightRadiusNight(512)

        setNormalAbilities(commaList(
            AbilityIds.invulnerable
            // AbilityIds.locust
        ))
    
@compiletime function torch()
    new Torch(ID_TORCH)