package PlayerData

import LinkedList
import ClosureForGroups
import ErrorHandling

import Regions
import Leaderboard
import GameplayConstants

class Remover implements ForGroupCallback
    bool removePlayerUnits
    player p
    construct(bool removePlayerUnits, player p)
        this.removePlayerUnits = removePlayerUnits
        this.p = p

    function callback(unit u)
        if removePlayerUnits
            u.remove()
        else if not u.getOwner() == p
            u.remove()

public class PlayerData
    int playerNum
    player p
    int level
    int zoneNumber
    int life
    int mobsRemoved
    unit builder
    bool levelInProgress
    int difficulty

    construct(int playerNum, int level, int zoneNumber, int life)
        this.playerNum = playerNum
        this.p = Player(playerNum)
        this.level = level
        this.zoneNumber = zoneNumber
        this.life = life
        this.mobsRemoved = 0
        this.levelInProgress = false
        this.difficulty = NORMAL

    function setBuilder(unit builder)
        this.builder = builder

    function cleanse(bool removePlayerUnits)
        Remover rem = new Remover(removePlayerUnits, this.p)
        forUnitsInRect(this.getPlayerRegion(), rem)

    function reset()
        this.levelInProgress = false
        this.zoneNumber = 0
        this.life = STARTING_LIFE
        this.mobsRemoved = 0
        this.level = 0
        updateLife(this.p, this.life)

    function getPlayerRegion() returns rect
        return this.getArea().area

    function getArea() returns Area
        if zones.size() < this.zoneNumber
            error("getArea#1")
            return new Area()
        if zones.get(this.zoneNumber).size() < this.p.getId()
            error("getArea#2")
            return new Area()

        return zones.get(this.zoneNumber).get(this.p.getId())

public LinkedList<PlayerData> playerData = new LinkedList<PlayerData>

@initFirst function initPlayerData()
    // Init player level tracker
    for i = 0 to NUMBER_OF_PLAYERS-1
        PlayerData pd = new PlayerData(i, 0, 0, STARTING_LIFE)
        playerData.add(pd)
