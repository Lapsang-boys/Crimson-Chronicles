package Alexandria

import HashMap

public HashMap<int, MobWrapper> mobMap = new HashMap<int, MobWrapper>
public HashMap<int, TowerWrapper> towerMap = new HashMap<int, TowerWrapper>

public abstract class TowerWrapper
    unit u
    construct(unit u)
        this.u = u
        towerMap.put(this.u.getHandleId(), this)
    ondestroy
        towerMap.remove(this.u.getHandleId())

    function getUnit() returns unit
        return this.u

public class EmptyMobWrapper extends MobWrapper
    construct(unit u)
        super(u)

public abstract class MobWrapper implements Enterer, Deather
    unit u
    construct(unit u)
        this.u = u
        mobMap.put(this.u.getHandleId(), this)

    function getUnit() returns unit
        return this.u

    function onEnter()
        skip

    function onDeath()
        skip

    ondestroy
        mobMap.remove(this.u.getHandleId())
        u.remove()

public interface Enterer
    function onEnter()

public interface Deather
    function onDeath()

// public interface Countdowner
//     function onFinish()

// Might be used for healther!
// public interface Perioder
//     function onTick()

// public interface Healther
//     function onHealth()
