package Alexandria

import HashMap

public HashMap<int, MobWrapper> mobMap = new HashMap<int, MobWrapper>
public HashMap<int, TowerWrapper> towerMap = new HashMap<int, TowerWrapper>

public abstract class TowerWrapper
    unit u
    construct(unit u)
        this.u = u
        towerMap.put(this.u.getHandleId(), this)
    ondestroy
        towerMap.remove(this.u.getHandleId())

    function getUnit() returns unit
        return this.u

public class EmptyMobWrapper extends MobWrapper
    construct(unit u)
        super(u)

public abstract class MobWrapper implements Spawner, Enterer, Deather, Ender, Ticker
    unit u
    construct(unit u)
        this.u = u
        mobMap.put(this.u.getHandleId(), this)

    function getUnit() returns unit
        return this.u

    override function onSpawn()
        skip

    override function onEnter()
        skip

    override function onEnd() returns bool
        return false

    override function onDeath(player p)
        skip

    override function startTick()
        skip

    ondestroy
        mobMap.remove(this.u.getHandleId())
        u.remove()

public interface Spawner
    function onSpawn()

public interface Enterer
    function onEnter()

public interface Deather
    function onDeath(player p)

public interface Ender
    function onEnd() returns bool

// public interface Countdowner
//     function onFinish()

public interface Ticker
    function startTick()

// public interface Healther
//     function onHealth()
