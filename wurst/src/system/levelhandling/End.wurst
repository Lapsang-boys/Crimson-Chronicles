package End

import Assets
import LinkedList

import Regions
import Alexandria
import GameplayConstants
import Movement
import TimedEffect
import LevelHandler

function leak()
    let u = GetTriggerUnit()
    // Enders
    if mobMap.has(u.getHandleId())
        MobWrapper mw = mobMap.get(u.getHandleId())
        // Otherwise continue as normal.
        if mw.onEnd()
            return

    int n = u.getPlayerN()
    player p = Player(n)

    // Take player life.
    int lifeTaken = u.getFoodUsed()

    // SFX.
    createTimedEffect(u.getPos(), 1., Abilities.aIilTarget)

    // Point value is interpreted as bounty.
    registerLeak(p, lifeTaken, GetUnitPointValue(u))

    registerMobDeath(p)
    u.remove()

    // Destroy MobWrapper
    // maybe here
    if mobMap.has(u.getHandleId())
        destroy mobMap.get(u.getHandleId())

function isUnitOwnedByPlayerBrown() returns boolean
    return GetTriggerUnit().getOwner() == PLAYER_BROWN

// Todo(godbit): Fix hardcoded 4.
function isValid() returns boolean
    return GetTriggerUnit().getUserData() == 4

trigger endEnter = CreateTrigger()

@initThird function initEnd()
    endEnter.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    endEnter.addAction(function leak)

    for i=0 to NUMBER_OF_ZONES-1
        for p = 0 to NUMBER_OF_PLAYERS-1
            for r in zones.get(i).get(p).ends
                endEnter.addCondition(Condition(function isValid))
                TriggerRegisterEnterRectSimple(endEnter, r)
