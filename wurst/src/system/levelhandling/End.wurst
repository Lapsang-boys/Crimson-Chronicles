package End

import Assets
import LinkedList

import PlayerData
import Regions
import Alexandria
import GameplayConstants
import Movement
import TimedEffect
import LevelHandler
import HashMap

function leak()
    let u = GetTriggerUnit()
    // Enders
    if mobMap.has(u.getHandleId())
        MobWrapper mw = mobMap.get(u.getHandleId())
        // Otherwise continue as normal.
        if mw.onEnd()
            return

    int n = u.getPlayerN()
    player p = Player(n)

    // Take player life.
    int lifeTaken = u.getFoodUsed()

    // SFX.
    createTimedEffect(u.getPos(), 1., Abilities.aIilTarget)

    // Point value is interpreted as bounty.
    registerLeak(p, lifeTaken, GetUnitPointValue(u))

    registerMobDeath(p)
    u.remove()

    // Destroy MobWrapper
    // maybe here
    if mobMap.has(u.getHandleId())
        destroy mobMap.get(u.getHandleId())

function isUnitOwnedByPlayerBrown() returns boolean
    return GetTriggerUnit().getOwner() == PLAYER_BROWN

function hasValidCV() returns boolean
    unit u = GetTriggerUnit()
    PlayerData pd = playerData.get(u.getPlayerN())
    Path path = zones.get(pd.zoneNum).get(pd.p.getId()).paths.get(u.getPathId()) 

    printTimedToPlayer("Node id: " + I2S(u.getNodeId()), 10, Player(0))
    printTimedToPlayer("Path size: " + I2S(path.rects.size()), 10, Player(0))

    return path.rects.size()-1 == u.getNodeId()
            
trigger endEnter = CreateTrigger()

@initThird function initEnd()
    endEnter.addCondition(Condition(function hasValidCV))
    endEnter.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    endEnter.addAction(function leak)

    HashMap<rect, bool> added = new HashMap<rect, bool>
    for i=0 to NUMBER_OF_ZONES-1
        for p = 0 to NUMBER_OF_PLAYERS-1
            for path in zones.get(i).get(p).paths
                rect r = path.getEnd()
                registerRect(added, r)

function registerRect(HashMap<rect, bool> added, rect r)
    if added.has(r)
        return
    added.put(r, true)
    TriggerRegisterEnterRectSimple(endEnter, r)
