package LevelHandler

import LinkedList
import Assets
import SoundUtils
import ClosureForGroups

import Colorscheme
import Leaderboard
import GameplayConstants
import BuilderConstants
import PlayerData
import Levels

class Winner implements ForGroupCallback
    override function callback(unit u)
        u.setAnimation("stand victory")
        u.addEffect(Objects.toonBoom, "origin")

function loseLife(PlayerData pd, int i)
    pd.life -= i
    if pd.life >= 1 and i > 0
        SoundDefinition sd = new SoundDefinition(Sounds.creepAggroWhat1, false)
        sd.playForPlayer(pd.p)
        if i > 1
            printTimedToPlayer(warningColor.colorize("You lost ") + numberColor.colorize(I2S(i)) + warningColor.colorize(" lives. You have ") + numberColor.colorize(I2S(pd.life)) + warningColor.colorize(" left."), DISPLAY_TIME, pd.p)
        else if i == 1
            printTimedToPlayer(warningColor.colorize("You lost ") + numberColor.colorize(I2S(i)) + warningColor.colorize(" life. You have ") + numberColor.colorize(I2S(pd.life)) + warningColor.colorize(" left."), DISPLAY_TIME, pd.p)

    if pd.life <= 0
        loseGame(pd)

function loseGame(PlayerData pd)
    printTimedToPlayer(infoColor.colorize("You have lost the game."), DISPLAY_TIME, pd.p)
    pd.levelInProgress = false
    pd.cleanse(true, true)

function nextZone(PlayerData pd)
    pd.levelNum = 0
    pd.cleanse(true, false)
    printTimedToPlayer(infoColor.colorize("You saved Ashenvale!"), DISPLAY_TIME, pd.p)
    SoundDefinition sd = new SoundDefinition(Sounds.newTournament, false)
    sd.playForPlayer(pd.p)

    pd.zoneNum++

    // Remove fog of last area.
    pd.fog.stop()
    pd.fog.destr()

    pd.fog = CreateFogModifierRect(pd.p, FOG_OF_WAR_VISIBLE, pd.getPlayerRegion(), true, false)
    pd.fog.start()

    pd.builder.setPos(pd.getPlayerRegion().getCenter())
    pd.p.panCamToTimed(pd.builder, 0.5)

    pd.builder.removeAbility(ID_LEVEL_IN_PROGRESS)
    pd.builder.addAbility(ID_NEXT_LEVEL)

    pd.p.setGold(100)
    pd.p.setLumber(10)

function winGame(PlayerData pd)
    printTimedToPlayer(infoColor.colorize("You won the game!"), DISPLAY_TIME, pd.p)
    SoundDefinition sd = new SoundDefinition(Sounds.newTournament, false)
    sd.playForPlayer(pd.p)
    Winner w = new Winner()
    forUnitsInRect(pd.getPlayerRegion(), w)

function levelComplete(PlayerData pd)
    Level l = pd.getLevel()

    pd.levelInProgress = false
    pd.builder.removeAbility(ID_LEVEL_IN_PROGRESS)

    let finishedLevel = pd.levelNum
    pd.levelNum++
    pd.mobsRemoved = 0

    // Win game
    if pd.levelNum == pd.getLevels().size()
        if pd.zoneNum == zoneLevels.size()-1
            winGame(pd)
        else
            nextZone(pd)
        return

    if finishedLevel == 0
        printTimedToPlayer(infoColor.colorize("You have completed the info level."), DISPLAY_TIME, pd.p)
        // Play complete info level sound.
        SoundDefinition sd = new SoundDefinition(Sounds.jainaWhat1, false)
        sd.playForPlayer(pd.p)

    else
        printTimedToPlayer(infoColor.colorize("You completed level ")
        + numberColor.colorize(I2S(finishedLevel))
        + infoColor.colorize(" and also received ")
        + numberColor.colorize(I2S(l.bonus))
        + infoColor.colorize(" gold as bounty!"), DISPLAY_TIME, pd.p)

        // Reward bonus.
        pd.p.addGold(l.bonus)

        // Play victory sound.
        SoundDefinition sd = new SoundDefinition(Sounds.questCompleted, false)
        sd.playForPlayer(pd.p)

    pd.builder.addAbility(ID_NEXT_LEVEL)

    // might change area later.

public function registerMobDeath(player p)
    PlayerData pd = playerData.get(p.getId())
    pd.mobsRemoved++
    if pd.mobsRemoved == pd.getLevel().squadChain.size()
        levelComplete(pd)

public function registerMobCreation(player p)
    PlayerData pd = playerData.get(p.getId())
    pd.mobsRemoved--

public function registerLeak(player p, int lifeTaken, int bounty)
    PlayerData pd = playerData.get(p.getId())
    pd.p.addGold(bounty)
    loseLife(pd, lifeTaken)
    updateLife(pd.p, pd.life)
