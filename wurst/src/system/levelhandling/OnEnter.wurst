package OnEnter

import LinkedList

import Regions
import Alexandria
import Movement
import GameplayConstants

function act()
    let u = GetTriggerUnit()
    let cv = u.getUserData()
    u.setUserData(cv + 1)
    let pos = u.getNext()
    u.issuePointOrder("move", pos)

    if mobMap.has(u.getHandleId())
        mobMap.get(u.getHandleId()).onEnter()

function isUnitOwnedByPlayerBrown() returns boolean
    return GetTriggerUnit().getOwner() == PLAYER_BROWN

function hasValid(int i) returns boolean
    print("Unit:" + I2S(GetTriggerUnit().getUserData()))
    print("Expected:" + I2S(i))
    return GetTriggerUnit().getUserData() mod 10 == i

function hasValid1() returns boolean
    return hasValid(1)

function hasValid2() returns boolean
    return hasValid(2)

function hasValid3() returns boolean
    return hasValid(3)

trigger mobEnter1 = CreateTrigger()
trigger mobEnter2 = CreateTrigger()
trigger mobEnter3 = CreateTrigger()

@initThird function initOnEnter()
    mobEnter1.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    mobEnter2.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    mobEnter3.addCondition(Condition(function isUnitOwnedByPlayerBrown))
    mobEnter1.addAction(function act)
    mobEnter2.addAction(function act)
    mobEnter3.addAction(function act)

    for i=0 to NUMBER_OF_ZONES-1
        for p = 0 to NUMBER_OF_PLAYERS-1
            for path in zones.get(i).get(p).paths
                var r = path.rects.get(1)
                mobEnter1.addCondition(Condition(function hasValid1))
                TriggerRegisterEnterRectSimple(mobEnter1, r)

                r = path.rects.get(2)
                mobEnter2.addCondition(Condition(function hasValid2))
                TriggerRegisterEnterRectSimple(mobEnter2, r)

                r = path.rects.get(3)
                mobEnter3.addCondition(Condition(function hasValid3))
                TriggerRegisterEnterRectSimple(mobEnter3, r)
