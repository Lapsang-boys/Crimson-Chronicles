package BenderMob

import TimerUtils

import Alexandria
import Movement
import TimedEffect

public class BenderMob extends MobWrapper implements Enterer
    real bendDistance
    string bendFx
    string bendAnimation
    real bendAnimationDuration

    angle direction
    vec2 nextNode
    vec2 newPos

    construct(unit u, real bendDistance, string bendFx, string bendAnimation, real bendAnimationDuration)
        super(u)
        this.bendDistance = bendDistance
        this.bendFx = bendFx
        this.bendAnimation = bendAnimation
        this.bendAnimationDuration = bendAnimationDuration

    override function onEnter()
        startBend(this.u, this.bendAnimation, this.bendAnimationDuration, this.bendDistance, this.bendFx)

function bend()
    timer t = GetExpiredTimer()
    BendInfo bi = t.getData() castTo BendInfo

    createTimedEffect(bi.u.getPos(), 2., bi.bendFx)

    bi.u.setPos(bi.newPos)
    bi.u.unpause()
    bi.u.issuePointOrder("move", bi.nextNode)

    createTimedEffect(bi.u.getPos(), 2., bi.bendFx)

class BendInfo
    unit u
    vec2 nextNode
    vec2 newPos
    string bendFx

public function startBend(unit u, string bendAnimation, real bendAnimationDuration, real bendDistance, string bendFx)
    u.pause()
    u.setAnimation(bendAnimation)

    BendInfo bi = new BendInfo()
    bi.u = u
    bi.bendFx = bendFx

    vec2 origPos = u.getPos()
    bi.nextNode = getNext(u)
    angle direction = origPos.angleTo(bi.nextNode)
    bi.newPos = origPos.polarOffset(direction, bendDistance)

    createTimedEffect(origPos, 2., bendFx)
    u.setFacing(direction)

    timer t = getTimer()
    t.setData(bi castTo int)
    t.start(bendAnimationDuration, function bend)
