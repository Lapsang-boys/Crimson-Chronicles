package CyclicHealerMob

import TimerUtils

import Alexandria


public class CyclicHealerMob extends MobWrapper implements Ticker
    timer t
    real period
    int numStates
    int iterations
    trigger trig

    construct(unit u, real period, int numStates)
        super(u)
        this.t = getTimer()
        this.period = period
        this.iterations = 0
        this.numStates = numStates

        this.trig = CreateTrigger()
        this.trig.addAction(function stateAction)
        this.trig.registerUnitEvent(u, EVENT_UNIT_DAMAGED)

        startTick()

    override function startTick()
        t.setData(this castTo int)
        t.startPeriodic(this.period, function switchState)

    ondestroy
        this.t.release()
        this.trig.destr()

function switchState()
    timer t = GetExpiredTimer()
    CyclicHealerMob chm = t.getData() castTo CyclicHealerMob
    chm.iterations ++
    switch chm.iterations.moduloInt(chm.numStates)
        case 0
            // Normal state
            chm.u.setVertexColor(255, 255, 255, 255)
        case 1
            // More dmg state
            chm.u.setVertexColor(255, 200, 200, 255)
        case 2
            // Heal state
            chm.u.setVertexColor(200, 255, 200, 255)


function stateAction()
    let u = GetTriggerUnit()
    unit attacker = GetEventDamageSource()
    CyclicHealerMob chm = mobMap.get(u.getHandleId()) castTo CyclicHealerMob

    real dmg = GetEventDamage()
    real scaling = 0.25

    switch chm.iterations.moduloInt(chm.numStates)
        case 0
            // Normal state
            return
        case 1
            // More dmg state
            chm.trig.disable()
            attacker.damageTarget(chm.u, dmg*scaling)
            chm.trig.enable()
        case 2
            // Heal state
            chm.u.setHP(chm.u.getHP() + dmg*2)
