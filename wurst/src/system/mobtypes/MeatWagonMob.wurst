package MeatWagonMob

import Objects
import TimedEffect
import ClosureTimers
import LinkedList

import PlayerData
import Alexandria
import Movement
import MobMissile
import GameplayConstants
import LevelHandler

public class MeatWagonMob extends MobWrapper implements Enterer, Deather
    real v0
    real alpha
    real z0
    string impactFx
    LinkedList<int> spawnIds

    construct(unit u, real v0, real alpha, real z0, string impactFx, LinkedList<int> spawnIds)
        super(u)
        this.v0 = v0
        this.alpha = alpha
        this.z0 = z0
        this.impactFx = impactFx
        this.spawnIds = spawnIds

        player p = Player(super.u.getPlayerN())
        registerMobCreation(p)

    override function onEnter()
        this.u.pause()
        let baseAngle = this.u.getPos().angleTo(u.getNext())
        angle a = angle(0)
        real angleVariation = GetRandomReal(-PI/8, PI/8)
        int directionVariation = GetRandomInt(1, 2)

        switch u.getNodeId()
            case 2
                if directionVariation == 1
                    a = baseAngle + angle(PI/3 + angleVariation)
                else
                    a = baseAngle + angle(-PI/3 + angleVariation)
            case 3
                if u.getPathId() == 0
                    a = baseAngle + angle(-PI/16 + angleVariation)
                else
                    a = baseAngle + angle(PI/3 + angleVariation)
            case 4
                if u.getPathId() == 0
                    a = baseAngle + angle(-PI/16 + angleVariation)
                else

                    a = baseAngle + angle(PI/16 + angleVariation)

        this.u.setFacing(a)
        this.u.setAnimation("attack")
        doAfter(0.5) ->
            int mobId = this.spawnIds.get(GetRandomInt(0, this.spawnIds.size()-1))
            let missileU = createUnit(
                PLAYER_BROWN,
                mobId,
                this.u.getPos(),
                a)

            missileU.setUserData(this.u.getUserData())

            MobMissile mm = new MobMissile(missileU, this.v0, this.alpha, this.z0, this.impactFx)
            mm.launch()

        doAfter(2.0) ->
            this.u.unpause()

    override function onDeath(player p)
        let pd = p.getPlayerData()
        let total = this.u.getPath().getNodes().size()
        let shot = this.u.getNodeId()-1
        let spawn = total-shot
        createTimedEffect(this.u.getPos(), 1, Objects.hCancelDeath)

        for i = 1 to spawn
            doAfter(0.2*i) ->
                var offset = angle(i*2*PI/spawn).direction().setLength(128)
                var spawnPos = this.u.getPos().add(offset.x, offset.y)
                var idx = GetRandomInt(0, spawnIds.size()-1)
                addEffect(Objects.hCancelDeath, spawnPos)

                let monster = createUnit(
                    this.u.getOwner(),
                    this.spawnIds.get(idx),
                    spawnPos,
                    this.u.getPos().angleTo(this.u.getNext()))

                // Make monster transparent.
                monster.setUserData(this.u.getUserData())
                vec2 pos = monster.getNext()
                monster.issuePointOrder("move", pos)
                registerMobCreation(pd.p)
